/**
 * Ravimo Global API
 * Ravimo Mobile and Web Global API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: joseph.assouline@ravimoshark.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CustomError } from '../models/customError';
import { Session } from '../models/session';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { LoginServiceInterface }                            from './login.serviceInterface';


@Injectable({
  providedIn: 'root'
})
export class LoginService implements LoginServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Callback from facebook auth.
     * Get the user parameters.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public facebookCallback(observe?: 'body', reportProgress?: boolean): Observable<Session>;
    public facebookCallback(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Session>>;
    public facebookCallback(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Session>>;
    public facebookCallback(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];

        return this.httpClient.get<Session>(`${this.basePath}/user/login/facebook/callback`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Login by email and password.
     * Login
     * @param LANG user LANG
     * @param email User&#39;s email.
     * @param password User&#39;s password.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public login(LANG: string, email: string, password: string, observe?: 'body', reportProgress?: boolean): Observable<Session>;
    public login(LANG: string, email: string, password: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Session>>;
    public login(LANG: string, email: string, password: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Session>>;
    public login(LANG: string, email: string, password: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (LANG === null || LANG === undefined) {
            throw new Error('Required parameter LANG was null or undefined when calling login.');
        }

        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling login.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling login.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }

        let headers = this.defaultHeaders;
        if (LANG !== undefined && LANG !== null) {
            headers = headers.set('LANG', String(LANG));
        }

        // authentication (appToken) required
        if (this.configuration.apiKeys["X_APP_ID"]) {
            headers = headers.set('X_APP_ID', this.configuration.apiKeys["X_APP_ID"]);
        }

        // authentication (userToken) required
        if (this.configuration.apiKeys["X_USER_KEY"]) {
            headers = headers.set('X_USER_KEY', this.configuration.apiKeys["X_USER_KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];

        return this.httpClient.get<Session>(`${this.basePath}/user/login`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Login by Facebook account.
     * URL to redirect to facebook page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginFacebook(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public loginFacebook(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public loginFacebook(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public loginFacebook(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];

        return this.httpClient.get<any>(`${this.basePath}/user/login/facebook`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Google token
     * getting user details from G
     * @param Token user token
     * @param LANG user LANG
     * @param Googletoken Googletoken
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginGoogle(Token: string, LANG: string, Googletoken: string, observe?: 'body', reportProgress?: boolean): Observable<Session>;
    public loginGoogle(Token: string, LANG: string, Googletoken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Session>>;
    public loginGoogle(Token: string, LANG: string, Googletoken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Session>>;
    public loginGoogle(Token: string, LANG: string, Googletoken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Token === null || Token === undefined) {
            throw new Error('Required parameter Token was null or undefined when calling loginGoogle.');
        }

        if (LANG === null || LANG === undefined) {
            throw new Error('Required parameter LANG was null or undefined when calling loginGoogle.');
        }

        if (Googletoken === null || Googletoken === undefined) {
            throw new Error('Required parameter Googletoken was null or undefined when calling loginGoogle.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (Googletoken !== undefined && Googletoken !== null) {
            queryParameters = queryParameters.set('Googletoken', <any>Googletoken);
        }

        let headers = this.defaultHeaders;
        if (Token !== undefined && Token !== null) {
            headers = headers.set('Token', String(Token));
        }
        if (LANG !== undefined && LANG !== null) {
            headers = headers.set('LANG', String(LANG));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];

        return this.httpClient.get<Session>(`${this.basePath}/user/login/google`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Provide Session Token
     *  Provide Session Token and user.Name, NumberOfCartElements, user.refclient
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startSession(observe?: 'body', reportProgress?: boolean): Observable<Session>;
    public startSession(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Session>>;
    public startSession(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Session>>;
    public startSession(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (appToken) required
        if (this.configuration.apiKeys["X_APP_ID"]) {
            headers = headers.set('X_APP_ID', this.configuration.apiKeys["X_APP_ID"]);
        }

        // authentication (userToken) required
        if (this.configuration.apiKeys["X_USER_KEY"]) {
            headers = headers.set('X_USER_KEY', this.configuration.apiKeys["X_USER_KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];

        return this.httpClient.post<Session>(`${this.basePath}/user/verifyToken`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
