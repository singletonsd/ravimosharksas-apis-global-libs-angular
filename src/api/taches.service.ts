/**
 * Ravimo Global API
 * Ravimo Mobile and Web Global API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: joseph.assouline@ravimoshark.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CustomError } from '../models/customError';
import { Taches } from '../models/taches';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { TachesServiceInterface }                            from './taches.serviceInterface';


@Injectable({
  providedIn: 'root'
})
export class TachesService implements TachesServiceInterface {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get all taches filtered by values provided.
     * Get all taches filtered by values provided.
     * @param Token user token
     * @param LANG user LANG
     * @param TechnicienId Technicien&#39;s id.
     * @param TaskId Task&#39;s id.
     * @param ClientsAddressId ClientsAddress&#39; id.
     * @param RefClient 
     * @param DateAppel Call&#39;s Day. Format: YYYY-MM-DD
     * @param Date_Depan Fix&#39;s Day. Format: YYYY-MM-DD
     * @param Fixed If the tasks were fixed or not
     * @param MachineId Machine&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getListTaches(Token: string, LANG: string, TechnicienId?: number, TaskId?: number, ClientsAddressId?: number, RefClient?: string, DateAppel?: string, Date_Depan?: string, Fixed?: boolean, MachineId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Taches>>;
    public getListTaches(Token: string, LANG: string, TechnicienId?: number, TaskId?: number, ClientsAddressId?: number, RefClient?: string, DateAppel?: string, Date_Depan?: string, Fixed?: boolean, MachineId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Taches>>>;
    public getListTaches(Token: string, LANG: string, TechnicienId?: number, TaskId?: number, ClientsAddressId?: number, RefClient?: string, DateAppel?: string, Date_Depan?: string, Fixed?: boolean, MachineId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Taches>>>;
    public getListTaches(Token: string, LANG: string, TechnicienId?: number, TaskId?: number, ClientsAddressId?: number, RefClient?: string, DateAppel?: string, Date_Depan?: string, Fixed?: boolean, MachineId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Token === null || Token === undefined) {
            throw new Error('Required parameter Token was null or undefined when calling getListTaches.');
        }

        if (LANG === null || LANG === undefined) {
            throw new Error('Required parameter LANG was null or undefined when calling getListTaches.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (TechnicienId !== undefined && TechnicienId !== null) {
            queryParameters = queryParameters.set('TechnicienId', <any>TechnicienId);
        }
        if (TaskId !== undefined && TaskId !== null) {
            queryParameters = queryParameters.set('TaskId', <any>TaskId);
        }
        if (ClientsAddressId !== undefined && ClientsAddressId !== null) {
            queryParameters = queryParameters.set('ClientsAddressId', <any>ClientsAddressId);
        }
        if (RefClient !== undefined && RefClient !== null) {
            queryParameters = queryParameters.set('RefClient', <any>RefClient);
        }
        if (DateAppel !== undefined && DateAppel !== null) {
            queryParameters = queryParameters.set('DateAppel', <any>DateAppel);
        }
        if (Date_Depan !== undefined && Date_Depan !== null) {
            queryParameters = queryParameters.set('Date_Depan', <any>Date_Depan);
        }
        if (Fixed !== undefined && Fixed !== null) {
            queryParameters = queryParameters.set('Fixed', <any>Fixed);
        }
        if (MachineId !== undefined && MachineId !== null) {
            queryParameters = queryParameters.set('MachineId', <any>MachineId);
        }

        let headers = this.defaultHeaders;
        if (Token !== undefined && Token !== null) {
            headers = headers.set('Token', String(Token));
        }
        if (LANG !== undefined && LANG !== null) {
            headers = headers.set('LANG', String(LANG));
        }

        // authentication (appToken) required
        if (this.configuration.apiKeys["X_APP_ID"]) {
            headers = headers.set('X_APP_ID', this.configuration.apiKeys["X_APP_ID"]);
        }

        // authentication (userToken) required
        if (this.configuration.apiKeys["X_USER_KEY"]) {
            headers = headers.set('X_USER_KEY', this.configuration.apiKeys["X_USER_KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];

        return this.httpClient.get<Array<Taches>>(`${this.basePath}/taches`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modify code of an existing tache.
     * Modify code of an existing tache.
     * @param Token user token
     * @param LANG user LANG
     * @param Tache Tache object
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putCodeTache(Token: string, LANG: string, Tache: Taches, observe?: 'body', reportProgress?: boolean): Observable<Taches>;
    public putCodeTache(Token: string, LANG: string, Tache: Taches, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Taches>>;
    public putCodeTache(Token: string, LANG: string, Tache: Taches, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Taches>>;
    public putCodeTache(Token: string, LANG: string, Tache: Taches, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Token === null || Token === undefined) {
            throw new Error('Required parameter Token was null or undefined when calling putCodeTache.');
        }

        if (LANG === null || LANG === undefined) {
            throw new Error('Required parameter LANG was null or undefined when calling putCodeTache.');
        }

        if (Tache === null || Tache === undefined) {
            throw new Error('Required parameter Tache was null or undefined when calling putCodeTache.');
        }

        let headers = this.defaultHeaders;
        if (Token !== undefined && Token !== null) {
            headers = headers.set('Token', String(Token));
        }
        if (LANG !== undefined && LANG !== null) {
            headers = headers.set('LANG', String(LANG));
        }

        // authentication (appToken) required
        if (this.configuration.apiKeys["X_APP_ID"]) {
            headers = headers.set('X_APP_ID', this.configuration.apiKeys["X_APP_ID"]);
        }

        // authentication (userToken) required
        if (this.configuration.apiKeys["X_USER_KEY"]) {
            headers = headers.set('X_USER_KEY', this.configuration.apiKeys["X_USER_KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.patch<Taches>(`${this.basePath}/taches`,
            Tache,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Modify existing tache.
     * Modify existing tache.
     * @param Token user token
     * @param LANG user LANG
     * @param Tache Tache object
     * @param NotificateToTech If send notification to technician&#39;s phone.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Taches>;
    public putTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Taches>>;
    public putTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Taches>>;
    public putTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Token === null || Token === undefined) {
            throw new Error('Required parameter Token was null or undefined when calling putTache.');
        }

        if (LANG === null || LANG === undefined) {
            throw new Error('Required parameter LANG was null or undefined when calling putTache.');
        }

        if (Tache === null || Tache === undefined) {
            throw new Error('Required parameter Tache was null or undefined when calling putTache.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (NotificateToTech !== undefined && NotificateToTech !== null) {
            queryParameters = queryParameters.set('NotificateToTech', <any>NotificateToTech);
        }

        let headers = this.defaultHeaders;
        if (Token !== undefined && Token !== null) {
            headers = headers.set('Token', String(Token));
        }
        if (LANG !== undefined && LANG !== null) {
            headers = headers.set('LANG', String(LANG));
        }

        // authentication (appToken) required
        if (this.configuration.apiKeys["X_APP_ID"]) {
            headers = headers.set('X_APP_ID', this.configuration.apiKeys["X_APP_ID"]);
        }

        // authentication (userToken) required
        if (this.configuration.apiKeys["X_USER_KEY"]) {
            headers = headers.set('X_USER_KEY', this.configuration.apiKeys["X_USER_KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Taches>(`${this.basePath}/taches`,
            Tache,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add new Tache
     * 
     * @param Token user token
     * @param LANG user LANG
     * @param Tache Tache object
     * @param NotificateToTech If send notification to technician&#39;s phone.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Taches>;
    public setTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Taches>>;
    public setTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Taches>>;
    public setTache(Token: string, LANG: string, Tache: Taches, NotificateToTech?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Token === null || Token === undefined) {
            throw new Error('Required parameter Token was null or undefined when calling setTache.');
        }

        if (LANG === null || LANG === undefined) {
            throw new Error('Required parameter LANG was null or undefined when calling setTache.');
        }

        if (Tache === null || Tache === undefined) {
            throw new Error('Required parameter Tache was null or undefined when calling setTache.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (NotificateToTech !== undefined && NotificateToTech !== null) {
            queryParameters = queryParameters.set('NotificateToTech', <any>NotificateToTech);
        }

        let headers = this.defaultHeaders;
        if (Token !== undefined && Token !== null) {
            headers = headers.set('Token', String(Token));
        }
        if (LANG !== undefined && LANG !== null) {
            headers = headers.set('LANG', String(LANG));
        }

        // authentication (appToken) required
        if (this.configuration.apiKeys["X_APP_ID"]) {
            headers = headers.set('X_APP_ID', this.configuration.apiKeys["X_APP_ID"]);
        }

        // authentication (userToken) required
        if (this.configuration.apiKeys["X_USER_KEY"]) {
            headers = headers.set('X_USER_KEY', this.configuration.apiKeys["X_USER_KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'text/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Taches>(`${this.basePath}/taches`,
            Tache,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
