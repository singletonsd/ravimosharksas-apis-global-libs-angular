/**
 * Ravimo Global API
 * Ravimo Mobile and Web Global API
 *
 * OpenAPI spec version: 2.0.0
 * Contact: joseph.assouline@ravimoshark.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { CustomError } from '../models/customError';
import { Session } from '../models/session';
import { Users } from '../models/users';


import { Configuration }                                     from '../configuration';


export interface UserServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Change user email.
    * Change user email
    * @param LANG user LANG
    * @param email User&#39;s email
    */
    changeEmail(LANG: string, email: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Change password by providing old password.
    * change user password
    * @param LANG user LANG
    * @param passwordOld Old password
    * @param passwordNew Old password
    */
    changePasswordWithOldPassword(LANG: string, passwordOld: string, passwordNew: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Change password by providing email&#39;s token.
    * Request a new password with forget token.
    * @param newPassword Forgot password token
    */
    changePasswordWithToken(newPassword: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * 
    * CheckEmail
    * @param token Key to reset password
    * @param email account email
    */
    checkEmail(token: string, email: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Callback from facebook auth.
    * Get the user parameters.
    */
    facebookCallback(extraHttpRequestParams?: any): Observable<Session>;

    /**
    * Send email to user who lost password
    * forgotPassword
    * @param LANG user LANG
    * @param email User&#39;s email
    * @param killSessions If session&#39;s asociated with that email must be cleared.
    */
    forgotPasswordClient(LANG: string, email: string, killSessions: boolean, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Get client&#39;s information.
    * get profile info
    * @param Token user token
    * @param LANG user LANG
    */
    getProfile(Token: string, LANG: string, extraHttpRequestParams?: any): Observable<Users>;

    /**
    * Login by email and password.
    * Login
    * @param LANG user LANG
    * @param email User&#39;s email.
    * @param password User&#39;s password.
    */
    login(LANG: string, email: string, password: string, extraHttpRequestParams?: any): Observable<Session>;

    /**
    * Login by Facebook account.
    * URL to redirect to facebook page.
    */
    loginFacebook(extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Google token
    * getting user details from G
    * @param Token user token
    * @param LANG user LANG
    * @param Googletoken Googletoken
    */
    loginGoogle(Token: string, LANG: string, Googletoken: string, extraHttpRequestParams?: any): Observable<Session>;

    /**
    * update client&#39;s information.
    * change profile info
    * @param LANG user LANG
    * @param User User details
    */
    putProfile(LANG: string, User: Users, extraHttpRequestParams?: any): Observable<Users>;

    /**
    * 
    * Send email verification
    * @param email account email
    */
    sendEmailVerification(email: string, extraHttpRequestParams?: any): Observable<string>;

    /**
    * Register User
    * Registration
    * @param LANG user LANG
    * @param User User&#39;s data
    * @param Password User&#39;s password.
    */
    setProfile(LANG: string, User: Users, Password: string, extraHttpRequestParams?: any): Observable<Users>;

    /**
    * Provide Session Token
    *  Provide Session Token and user.Name, NumberOfCartElements, user.refclient
    */
    startSession(extraHttpRequestParams?: any): Observable<Session>;

}
